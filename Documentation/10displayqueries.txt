1. VIEW BIKES BASED ON TYPE

SELECT * FROM bike
WHERE bike_type = 'dirt';

2. VIEW A BIKE's HISTORY

SELECT bike.vin, bike.bike_type, bike.repair_status, repair_bike.problem_date, repair_bike.problem_description, repair_bike.repair_date, course.course_id, course.course_date 
FROM bike 
LEFT JOIN repair_bike ON bike.vin = repair_bike.vin 
LEFT JOIN assigned_to ON bike.vin = assigned_to.vin
LEFT JOIN course ON assigned_to.course_id = course.course_id
WHERE bike.vin = '1GHS8363429D49K2B';
LIMIT 0, 500;

3. VIEW BIKES AVAILABLE ON A DATE PROVIDED

SELECT vin, bike_type FROM bike
WHERE vin NOT IN (
SELECT vin FROM assigned_to 
WHERE course_id IN (
SELECT course_id FROM course WHERE course_date = '2023-01-31'));

4. VIEW INSTRUCTORS AVAILABLE ON A DATE

SELECT instructor_id, instructor_name, coach_dirt_bike, coach_street_bike, teach_street_bike
FROM instructor
WHERE instructor_id NOT IN (
SELECT instructor_id
FROM instructs
WHERE course_id IN (
SELECT course_id
FROM course
WHERE course_date = '2023-01-31'
));

5. VIEW INSTURCTORS SCHEDULE BASED ON ID

SELECT 
  i.instructor_id AS instructor_id, 
  i.instructor_name AS instructor_name, 
  c.course_id AS course_id, 
  c.course_name AS course_name, 
  c.course_type, 
  c.course_date, 
  s.in_session
FROM instructor i
JOIN instructs s ON i.instructor_id = s.instructor_id
JOIN course c ON s.course_id = c.course_id
WHERE i.instructor_id = 2;

6. VIEW STUDENT'S REPORT BASED ON ID

SELECT *
FROM enrolled_in 
WHERE student_id = 7
ORDER BY course_id;


7. VIEW ALL STUDENTS

SELECT *
FROM student;

8. VIEW ALL COURSES 

SELECT c.course_id, i.instructor_id, s.student_id, t.classroom_id, u.range_id, t.in_session AS classroom_session, u.in_session AS range_session, c.course_date
FROM course c 
LEFT JOIN instructs i ON c.course_id = i.course_id
LEFT JOIN enrolled_in s ON s.course_id = c.course_id 
LEFT JOIN taught_in t ON t.course_id = s.course_id 
LEFT JOIN uses u ON c.course_id = u.course_id;

9. RANGE AVAILABILITY SELECTION

SELECT range_location.range_id,
CASE
WHEN sub_query.session_count = 1 THEN
(SELECT CASE in_session
WHEN 'AM' THEN 'PM'
WHEN 'PM' THEN 'AM'
ELSE 'NONE'
END
FROM uses
WHERE uses.range_id = range_location.range_id
AND uses.course_id IN (
SELECT course.course_id
FROM course
WHERE course.course_date = '2023-01-30'
)
LIMIT 1
)
WHEN sub_query.session_count = 2 THEN 'NONE'
ELSE 'AM & PM'
END as session_available
FROM range_location
LEFT JOIN (
SELECT uses.range_id,
COUNT(uses.in_session) as session_count
FROM uses
JOIN course
ON uses.course_id = course.course_id
AND course.course_date = '2023-01-30'
GROUP BY uses.range_id
) sub_query
ON range_location.range_id = sub_query.range_id
LIMIT 0, 500


10. CLASSROOM AVAILABILITY SELECTION

SELECT classroom_location.classroom_id,
CASE
WHEN sub_query.session_count = 1 THEN
(SELECT CASE in_session
WHEN 'AM' THEN 'PM'
WHEN 'PM' THEN 'AM'
ELSE 'NONE'
END
FROM taught_in
WHERE taught_in.classroom_id = classroom_location.classroom_id
AND taught_in.course_id IN (
SELECT course.course_id
FROM course
WHERE course.course_date = '2023-01-31'
)
LIMIT 1
)
WHEN sub_query.session_count = 2 THEN 'NONE'
ELSE 'AM & PM'
END as session_available
FROM classroom_location
LEFT JOIN (
SELECT taught_in.classroom_id,
COUNT(taught_in.in_session) as session_count
FROM taught_in
JOIN course
ON taught_in.course_id = course.course_id
AND course.course_date = '2023-01-31'
GROUP BY taught_in.classroom_id
) sub_query
ON classroom_location.classroom_id = sub_query.classroom_id
LIMIT 0, 500


